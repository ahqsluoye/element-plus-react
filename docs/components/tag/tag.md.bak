import { h, Fragment } from 'preact';
import { useMemo } from 'react';
import PageContainer from '@/Layout/PageContainer';
import DemoBlock from '@/Layout/DemoBlock';
import RightNav from '@/Layout/RightNav';
import { EventsTable, PropsTable } from '@/Layout/Table';
import Basic, { html as basic_html } from './basic';
import Removable, { html as removable_html } from './removable';
import Editable, { html as editable_html } from './editable';
import Sizes, { html as sizes_html } from './sizes';
import Theme, { html as theme_html } from './theme';
import Rounded, { html as rounded_html, rounded_style } from './rounded';
// import Checkable, { html as checkable_html } from './checkable';

const TagDoc = () => {
const propsData = useMemo(
() => [
['type', '类型', 'string', 'primary | success | info | warning | danger', '—'],
['closable', '是否可关闭', 'boolean', '—', 'false'],
['disableTransitions', '是否禁用渐变动画', 'boolean', '—', 'false'],
['hit', '是否有边框描边', 'boolean', '—', 'false'],
['color', '背景色', 'string', '—', '—'],
['theme', '主题', 'string', 'dark | light | plain', 'light'],
['className', '自定义样式名', 'string', '', '—'],
['style', '自定义样式', 'JSX.CSSProperties', '', '—'],
],
[],
);

    return (
        <>
            <PageContainer>
                <section class="content element-doc content">
                    <h2>Tag 标签</h2>
                    <p>用于标记和选择。</p>

                    <DemoBlock title="基础用法" content="由 `type` 属性来选择 `tag` 的类型。 也可以通过 `color` 属性来自定义背景色。" source={<Basic />} highlight={basic_html} />

                    <DemoBlock
                        title="可移除标签"
                        content={
                            '设置 `closable` 属性可以定义一个标签是否可移除。 它接受一个 `Boolean`。 默认的标签移除时会附带渐变动画。 \
                        如果不想使用，可以设置 `disableTransitions` 属性，它接受一个 `Boolean`，true 为关闭。 当 `Tag` 被移除时会触发 `close` 事件。'
                        }
                        source={<Removable />}
                        highlight={removable_html}
                    />

                    <DemoBlock title="动态编辑标签" content="动态编辑标签可以通过点击标签关闭按钮后触发的 `onClose` 事件来实现。" source={<Editable />} highlight={editable_html} />

                    <DemoBlock
                        title="不同尺寸"
                        content={
                            'Tag 组件提供除了默认值以外的三种尺寸，可以在不同场景下选择合适的按钮尺寸。 `onClose` 事件来实现。 \
                             使用 `size` 属性来设置额外尺寸, 可选值包括 `large`, `default` 或 `small`.'
                        }
                        source={<Sizes />}
                        highlight={sizes_html}
                    />

                    <DemoBlock
                        title="主题"
                        content={
                            'Tag 组件提供了三个不同的主题：`dark`、`light` 和 `plain`。 \
                             通过设置 `theme` 属性来改变主题，默认为 `light`。'
                        }
                        source={<Theme />}
                        highlight={theme_html}
                        extra={[{ type: 'scss', name: 'style', content: rounded_style, label: 'theme.scss' }]}
                    />

                    <DemoBlock
                        title="圆形标签"
                        content={'可以向按钮组件一样变为完全圆形。'}
                        source={<Rounded />}
                        highlight={rounded_html}
                        extra={[{ type: 'scss', name: 'style', content: rounded_style, label: 'theme.scss' }]}
                    />

                    <h3>属性</h3>
                    <PropsTable data={propsData} />

                    <h3>事件</h3>
                    <EventsTable
                        data={[
                            ['onClick', '点击 `Tag` 时触发的事件', '—'],
                            ['onClose', '关闭 `Tag` 时触发的事件', '—'],
                        ]}
                    />

                    <RightNav />
                </section>
            </PageContainer>
        </>
    );

};

export default TagDoc;
