import { h } from 'preact';
import { useMemo } from 'react';
import PageContainer from '@/Layout/PageContainer';
import DemoBlock from '@/Layout/DemoBlock';
import RightNav from '@/Layout/RightNav';
import { PropsTable } from '@/Layout/Table';
import Alert, { html as alert_html } from './alert';
import Confirm, { html as confirm_html } from './confirm';
// import Prompt, { html as prompt_html } from './prompt';
// import UseVnode, { html as use_vnode_html } from './use-vnode';
import Customization, { html as customization_html } from './customization';
// import UseHtml, { html as use_html_html } from './use-html';
import DistinguishableCloseCancel, { html as distinguishable_close_cancel_html } from './distinguishable-close-cancel';
// import CenteredContent, { html as centered_content_html } from './centered-content';
// import CustomizedIcon, { html as customized_icon_html } from './customized-icon';
// import Draggable, { html as draggable_html } from './draggable';

const MessageBoxDoc = () => {
const propsData = useMemo(
() => [
['title', '`MessageBox` 标题', 'string', '—', '—'],
['message', '`MessageBox` 消息正文内容', 'string', '—', '—'],
// ['dangerouslyUseHTMLString', '是否将 message 属性作为 HTML 片段处理', 'boolean', '—', 'false'],
['type', '消息类型，用于显示图标', 'string', '`success` | `info` | `warning` | `error`', '—'],
['icon', '消息自定义图标，该属性会覆盖 `type` 的图标。', '`string` | `Vnode`', '—', '—'],
['className', '`MessageBox` 的自定义类名', 'string', '—', '—'],
['style', '`MessageBox` 的自定义内联样式', 'JSX.CSSProperties', '—', '—'],
[
'callback',
'若不使用 `Promise`，可以使用此参数指定 `MessageBox` 关闭后的回调函数。',
'function(action, done, instance)，`action` 的值为 `confirm` , `cancel `或 `close`, `instance` 为 `MessageBox` 实例， 可以通过它访问实例上的属性和方法；`done` 用于关闭 `MessageBox` 实例',
'—',
'—',
],
['showClose', 'MessageBox 是否显示右上角关闭按钮', 'boolean', '—', 'true'],
[
'beforeClose',
'`messageBox` 关闭前的回调，会暂停消息弹出框的关闭过程。',
'function(action, done, instance)，`action` 的值为`confirm`, `cancel` 或 `close`；`instance`为 `MessageBox` 实例，可以通过它访问实例上的属性和方法；`done` 用于关闭 `MessageBox` 实例',
'—',
'—',
],
['distinguishCancelAndClose', '是否将取消（点击取消按钮）与关闭（点击关闭按钮或遮罩层）进行区分', 'boolean', '—', 'false'],
['showCancelButton', '是否显示取消按钮', 'boolean', '—', 'false（以 confirm 和 prompt 方式调用时为 true）'],
['showConfirmButton', '是否显示确定按钮', 'boolean', '—', 'true'],
['cancelButtonText', '取消按钮的文本内容', 'string', '—', 'Cancel'],
['confirmButtonText', '确定按钮的文本内容', 'string', '—', 'OK'],
['cancelButtonClass', '取消按钮的自定义类名', 'string', '—', '—'],
['confirmButtonClass', '确定按钮的自定义类名', 'string', '—', '—'],
['backdrop', '是否可通过点击遮罩关闭 `MessageBox`', 'boolean | static', '—', 'true（以 alert 方式调用时为 static）'],
// ['show-input', '是否显示输入框', 'boolean', '—', 'false（以 prompt 方式调用时为 true）'],
// ['input-placeholder', '输入框的占位符', 'string', '—', '—'],
// ['input-type', '输入框的类型', 'string', '—', 'text'],
// ['input-value', '输入框的初始文本', 'string', '—', '—'],
// ['input-pattern', '输入框的校验表达式', 'regexp', '—', '—'],
// [
// 'input-validator',
// '输入框的校验函数。 应该返回一个 boolean 或者 string， 如果返回的是一个 string 类型，那么该返回值会被赋值给 inputErrorMessage 用于向用户展示错误消息。',
// 'function',
// '—',
// '—',
// ],
// ['input-error-message', '校验未通过时的提示文本', 'string', '—', 'Illegal input'],
// ['center', '是否居中布局', 'boolean', '—', 'false'],
// ['draggable', 'messageBox 是否可拖放', 'boolean', '—', 'false'],
// ['round-button', '是否使用圆角按钮', 'boolean', '—', 'false'],
['buttonSize', '自定义确认和取消按钮的尺寸', 'string', 'small | large', 'default'],
],
[],
);

    return (
        <PageContainer>
            <section class="content element-doc content">
                <h2>MessageBox 消息弹框</h2>
                <p>模拟系统的消息提示框而实现的一套模态对话框组件，用于消息提示、确认消息和提交内容。</p>

                <DemoBlock
                    title="消息提示"
                    content={
                        '当用户进行操作时会被触发，该对话框中断用户操作，直到用户确认知晓后才可关闭。 \
                        调用 `MessageBox.alert` 方法即可打开消息提示， 它模拟了系统的 `alert`，无法通过按下 `ESC` 或点击框外关闭。 此例中接收了两个参数，`message` 和 `title`。\
                        值得一提的是，窗口被关闭后，它默认会返回一个 `Promise` 对象便于进行后续操作的处理。 \
                        若不确定浏览器是否支持 `Promise`，可自行引入第三方 `polyfill` 或像本例一样使用回调进行后续处理。'
                    }
                    source={<Alert />}
                    highlight={alert_html}
                />

                <DemoBlock
                    title="确认消息"
                    content={
                        '提示用户确认其已经触发的动作，并询问是否进行此操作时会用到此对话框。 \
                        调用$confirm方法即可打开消息提示，它模拟了系统的 `confirm`。 `Message Box` 组件也拥有极高的定制性，我们可以传入 `options` 作为第三个参数，\
                        它是一个字面量对象。 `type` 字段表明消息类型，可以为 `success`，`error`，`info` 和 `warning`，无效的设置将会被忽略。 \
                        在这里我们返回了一个 `Promise` 来处理后续响应。'
                    }
                    source={<Confirm />}
                    highlight={confirm_html}
                />

                <DemoBlock
                    title="个性化设置你的弹框"
                    content={
                        '消息弹框可以被定制来展示各种内容。 \
                        上面提到的三个方法都是对 `MessageBox` 方法的二次包装。 本例直接调用 `MessageBox` 方法，使用了 `showCancelButton` 字段，\
                        用于显示取消按钮。 另外可使用 `cancelButtonClass` 为其添加自定义样式，使用 `cancelButtonText` 来自定义取消按钮文本\
                        （`Confirm` 按钮也具有相同的字段，在文末的 `API` 说明中有完整的字段列表）。 此例还使用了 `beforeClose` 属性， \
                        当 `beforeClose` 被赋值且被赋值为一个回调函数时，在消息弹框被关闭之前将会被调用，并且可以通过该方法来阻止弹框被关闭。 \
                        它是一个接收两个参数：`action` 和 `done` 的方法。 使用它能够在关闭前对实例进行一些操作，比如为确定按钮添加 `loading` 状态等；\
                        此时若需要关闭实例，可以调用 `done` 方法（若在 `beforeClose` 中没有调用 `done`，则弹框便不会关闭）。'
                    }
                    source={<Customization />}
                    highlight={customization_html}
                />

                <DemoBlock
                    title="区分取消操作与关闭操作"
                    content={
                        '有些场景下，点击取消按钮与点击关闭按钮有着不同的含义。 \
                        默认情况下，当用户触发取消（点击取消按钮）和触发关闭（点击关闭按钮或遮罩层、按下 ESC 键）时，\
                        `Promise` 的 `reject` 回调和 `callback` 回调的参数均为 \'`cancel`\'。 如果将 `distinguishCancelAndClose` 属性设置为 true，\
                        则上述两种行为的参数分别为 \'`cancel`\' 和 \'`close`\'。'
                    }
                    source={<DistinguishableCloseCancel />}
                    highlight={distinguishable_close_cancel_html}
                />

                <h3>属性</h3>
                <PropsTable data={propsData} />

                <RightNav />
            </section>
        </PageContainer>
    );

};

export default MessageBoxDoc;
