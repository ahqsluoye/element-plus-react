import { h } from 'preact';
import { useMemo } from 'react';
import PageContainer from '@/Layout/PageContainer';
import DemoBlock from '@/Layout/DemoBlock';
import RightNav from '@/Layout/RightNav';
import { PropsTable } from '@/Layout/Table';

import Basic, { html as basic_html, data as basic_data } from './basic';
import OptionDisabling, { html as option_disabling_html, data as data2 } from './option-disabling';
import LastLevel, { html as last_level_html } from './last-level';
// import MultipleSelection, { html as multiple_selection_html } from './multiple-selection';
// import AnyLevel, { html as any_level_html } from './any-level';
import DynamicLoading, { html as dynamic_loading_html } from './dynamic-loading';
import DynamicLoadingTree, { html as dynamic_loading_tree_html, data as tree_data } from './dynamic-loading-tree';
// import Filterable, { html as filterable_html } from './filterable';
// import CustomContent, { html as custom_content_html } from './custom-content';
// import Panel, { html as panel_html } from './panel';

const CascaderDoc = () => {
const propsData = useMemo(
() => [
['value', '选中项绑定值', '-', '—', '—'],
['options', '可选项数据源，键名可通过 Props 属性配置', 'array', '—', '—'],
['menuProps', '配置选项，具体见下表', 'object', '—', '—'],
['treeMenuProps', '配置选项，具体见下表', 'object', '—', '—'],
// ['size', '尺寸', 'string', 'large / default / small', '—'],
['placeholder', '输入框占位文本', 'string', '—', '请选择'],
['disabled', '是否禁用', 'boolean', '—', 'false'],
['clearable', '是否支持清空选项', 'boolean', '—', 'false'],
['showAllLevels', '输入框中是否显示选中值的完整路径', 'boolean', '—', 'true'],
// ['collapseTags', '多选模式下是否折叠 Tag', 'boolean', '-', 'false'],
// ['collapseTagsTooltip', '当鼠标悬停于折叠标签的文本时，是否显示所有选中的标签。 要使用此属性，collapse-tags 属性必须设定为 true', 'boolean', '-', 'false'],
// eslint-disable-next-line quotes
['separator', '用于分隔选项的字符', 'string', '—', "'/'"],
// ['filterable', '该选项是否可以被搜索', 'boolean', '—', '—'],
// ['filterMethod', '自定义搜索逻辑，第一个参数是 node，第二个参数是 keyword，返回的布尔值表示是否保留该选项', 'function(node, keyword)', '-', '-'],
// ['debounce', '搜索关键词正在输入时的去抖延迟，单位为毫秒', 'number', '—', '300'],
// [
// 'beforeFilter',
// '过滤函数调用前欲被调用的钩子函数，该函数接受一个参数。 如果该函数的返回值是 false 或者是一个被拒绝的 Promise，那么接下来的过滤逻辑便不会执行。',
// 'function(value)',
// '—',
// '—',
// ],
['popperClass', '弹出内容的自定义类名', 'string', '—', '—'],
// ['teleported', '是否在弹出内容时启用动画', 'boolean', 'true / false', 'true'],
['tagType', '标签类型', 'string', 'success/info/warning/danger', 'info'],
],
[],
);

    return (
        <PageContainer>
            <section className="content element-doc content">
                <h2>Cascader 级联选择器</h2>
                <p>当一个数据集合有清晰的层级结构时，可通过级联选择器逐级查看并选择。</p>

                <DemoBlock
                    title="基础用法"
                    content={
                        '有两种触发子菜单的方式\
                        只需为 `Cascader` 的 `options` 属性指定选项数组即可渲染出一个级联选择器。 通过 `props.expandTrigger` 可以定义展开子级菜单的触发方式。'
                    }
                    source={<Basic />}
                    highlight={basic_html}
                    extra={[{ type: 'ts', name: 'comp1', content: basic_data, label: 'data.ts' }]}
                />

                <DemoBlock
                    title="有禁用选项"
                    content={
                        '通过在数据源中设置 disabled 字段来声明该选项是禁用的\
                        本例中，`options` 指定的数组中的第一个元素含有 `disabled: true` 键值对，因此是禁用的。 在默认情况下，`Cascader` 会检查数据中每一项的 `disabled` 字段是否为 `true`，\
                        如果你的数据中表示禁用含义的字段名不为 `disabled`，可以通过 `props.disabled` 属性来指定（详见下方 API 表格）。 当然，`value`、`label`和 `children` 这三个字段名也可以通过同样的方式指定。'
                    }
                    source={<OptionDisabling />}
                    highlight={option_disabling_html}
                    extra={[{ type: 'ts', name: 'comp1', content: data2, label: 'data.ts' }]}
                />

                <DemoBlock
                    path="cascader"
                    title="仅显示最后一级"
                    content={
                        '可以仅在输入框中显示选中项最后一级的标签，而不是选中项所在的完整路径。\
                        属性 `showAllLevels` 定义了是否显示完整的路径， 将其赋值为 `false` 则仅显示最后一级。'
                    }
                    source={<LastLevel />}
                    highlight={last_level_html}
                    extra={[{ type: 'ts', name: 'comp1', content: basic_data, label: 'data.ts' }]}
                />

                <DemoBlock
                    path="cascader"
                    title="动态加载"
                    content={
                        '当选中某一级时，动态加载该级下的选项。\
                        通过 `lazy` 开启动态加载，并通过 `lazyload` 来设置加载数据源的方法。 `lazyload` 方法有两个参数，第一个参数 `node` 为当前点击的节点，第二个 `resolve` 为数据加载完成的回调(必须调用)。 \
                        为了更准确的显示节点的状态，还可以对节点数据添加是否为叶子节点的标志位 (默认字段为 `leaf` ，可通过 `props.leaf` 修改)。 否则，将以有无子节点来判断其是否为叶子节点。'
                    }
                    source={<DynamicLoading />}
                    highlight={dynamic_loading_html}
                />

                <DemoBlock
                    path="cascader"
                    title="动态加载（树组件）"
                    content={
                        '当选中某一级时，动态加载该级下的选项。\
                        通过 `lazy` 开启动态加载，并通过 `lazyload` 来设置加载数据源的方法。 `lazyload` 方法有两个参数，第一个参数 `node` 为当前点击的节点，第二个 `resolve` 为数据加载完成的回调(必须调用)。 \
                        为了更准确的显示节点的状态，还可以对节点数据添加是否为叶子节点的标志位 (默认字段为 `leaf` ，可通过 `props.leaf` 修改)。 否则，将以有无子节点来判断其是否为叶子节点。'
                    }
                    source={<DynamicLoadingTree />}
                    highlight={dynamic_loading_tree_html}
                    extra={[{ type: 'ts', name: 'comp1', content: tree_data, label: 'data.ts' }]}
                />

                <h3>属性</h3>
                <PropsTable data={propsData} />

                <RightNav />
            </section>
        </PageContainer>
    );

};

export default CascaderDoc;
