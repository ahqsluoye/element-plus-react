import React, { Component } from 'react';
import { IconName } from '../Icon';
import { TreeProps as RcTreeProps } from './RCTree';
import { TreeNodeProps } from './TreeNode';

export interface AntdTreeNodeAttribute {
    eventKey: string;
    prefixCls: string;
    className: string;
    expanded: boolean;
    selected: boolean;
    checked: boolean;
    halfChecked: boolean;
    children: React.ReactElement;
    title: React.ReactElement;
    pos: string;
    dragOver: boolean;
    dragOverGapTop: boolean;
    dragOverGapBottom: boolean;
    isLeaf: boolean;
    selectable: boolean;
    disabled: boolean;
    disableCheckbox: boolean;
}

export interface AntTreeNodeProps {
    className?: string;
    checkable?: boolean;
    disabled?: boolean;
    disableCheckbox?: boolean;
    title?: string | React.ReactElement;
    key?: Key;
    eventKey?: string;
    isLeaf?: boolean;
    checked?: boolean;
    expanded?: boolean;
    loading?: boolean;
    selected?: boolean;
    selectable?: boolean;
    icon?: ((treeNode: AntdTreeNodeAttribute) => React.ReactElement) | React.ReactElement;
    children?: React.ReactElement;
    [customProp: string]: any;
}

export type AntTreeNode = Component<AntTreeNodeProps, {}>;

export interface AntTreeNodeBaseEvent {
    node: AntTreeNode;
    nativeEvent: MouseEvent;
}

export interface AntTreeNodeCheckedEvent extends AntTreeNodeBaseEvent {
    event: 'check';
    checked?: boolean;
    checkedNodes?: AntTreeNode[];
}

export interface AntTreeNodeSelectedEvent extends AntTreeNodeBaseEvent {
    event: 'select';
    selected?: boolean;
    selectedNodes?: DataNode[];
}

export interface AntTreeNodeExpandedEvent extends AntTreeNodeBaseEvent {
    expanded?: boolean;
}

export interface AntTreeNodeMouseEvent {
    node: AntTreeNode;
    event: any;
}

export interface AntTreeNodeDragEnterEvent extends AntTreeNodeMouseEvent {
    expandedKeys: Key[];
}

export interface AntTreeNodeDropEvent {
    node: AntTreeNode;
    dragNode: AntTreeNode;
    dragNodesKeys: Key[];
    dropPosition: number;
    dropToGap?: boolean;
    event: React.MouseEventHandler<HTMLElement>;
}

// [Legacy] Compatible for v3
export type TreeNodeNormal = DataNode;

type DraggableFn = (node: AntTreeNode) => boolean;
interface DraggableConfig {
    icon?: React.ReactElement | false;
    nodeDraggable?: DraggableFn;
}

export interface TreeProps<T> extends Omit<RcTreeProps<T>, 'prefixCls' | 'showLine' | 'direction' | 'draggable'> {
    showLine?: boolean | { showLeafIcon: boolean };
    className?: string;

    /** 是否支持多选 */
    multiple?: boolean;

    /** 是否自动展开父节点 */
    autoExpandParent?: boolean;

    /** Checkable状态下节点选择完全受控（父子节点选中状态不再关联） */
    checkStrictly?: boolean;

    /** 是否支持选中 */
    checkable?: boolean;

    /** 是否禁用树 */
    disabled?: boolean;

    /** 默认展开所有树节点 */
    defaultExpandAll?: boolean;

    /** 默认展开对应树节点 */
    defaultExpandParent?: boolean;

    /** 默认展开指定的树节点 */
    defaultExpandedKeys?: Key[];

    /** （受控）展开指定的树节点 */
    expandedKeys?: Key[];

    /** （受控）选中复选框的树节点 */
    checkedKeys?: Key[] | { checked: Key[]; halfChecked: Key[] };

    /** 默认选中复选框的树节点 */
    defaultCheckedKeys?: Key[];

    /** （受控）设置选中的树节点 */
    selectedKeys?: Key[];

    /** 默认选中的树节点 */
    defaultSelectedKeys?: Key[];
    selectable?: boolean;

    /** 点击树节点触发 */
    filterAntTreeNode?: (node: AntTreeNode) => boolean;
    loadedKeys?: Key[];

    /** 设置节点可拖拽（IE>8） */
    draggable?: DraggableFn | boolean | DraggableConfig;
    style?: React.CSSProperties;
    showIcon?: boolean;
    icon?: ((nodeProps: AntdTreeNodeAttribute) => React.ReactElement) | React.ReactElement;
    switcherIcon?: React.ReactElement<any>;
    prefixCls?: string;
    children?: React.ReactElement;
    blockNode?: boolean;
}

/** For fieldNames, we provides a abstract interface */
export interface BasicDataNode {
    checkable?: boolean;
    disabled?: boolean;
    disableCheckbox?: boolean;
    icon?: IconType;
    isLeaf?: boolean;
    selectable?: boolean;
    switcherIcon?: IconType;

    /** Set style of TreeNode. This is not recommend if you don't have any force requirement */
    className?: string;
    style?: React.CSSProperties;
}

export interface DataNode<T = any> extends BasicDataNode {
    children?: T[];
    key?: string | number;
    title?: string | React.ReactElement;
}

export interface EventDataNode extends DataNode {
    expanded: boolean;
    selected: boolean;
    checked: boolean;
    loaded: boolean;
    loading: boolean;
    halfChecked: boolean;
    dragOver: boolean;
    dragOverGapTop: boolean;
    dragOverGapBottom: boolean;
    pos: string;
    active: boolean;
}

export type IconType = React.ReactElement | ((props: TreeNodeProps) => React.ReactElement) | IconName;

export type Key = React.Key;

export type NodeElement = React.ReactElement<TreeNodeProps> & {
    selectHandle?: HTMLSpanElement;
    type: {
        isTreeNode: boolean;
    };
};

export type NodeInstance<TreeDataType extends BasicDataNode = DataNode> = Component<TreeNodeProps<TreeDataType>> & {
    selectHandle?: HTMLSpanElement;
};

export interface Entity {
    node: NodeElement;
    index: number;
    key: Key;
    pos: string;
    parent?: Entity;
    children?: Entity[];
}

export interface DataEntity<TreeDataType extends BasicDataNode = DataNode> extends Omit<Entity, 'node' | 'parent' | 'children'> {
    node: TreeDataType;
    nodes: TreeDataType[];
    parent?: DataEntity<TreeDataType>;
    children?: DataEntity<TreeDataType>[];
    level: number;
}

export interface FlattenNode {
    parent: FlattenNode | null;
    children: FlattenNode[];
    pos: string;
    data: DataNode;
    title: React.ReactElement;
    key: Key;
    isStart: boolean[];
    isEnd: boolean[];
}

export type GetKey<RecordType> = (record: RecordType, index?: number) => Key;

export type GetCheckDisabled<RecordType> = (record: RecordType) => boolean;

export type Direction = 'ltr' | 'rtl' | undefined;

export interface FieldNames {
    title?: string;

    /** @private Internal usage for `rc-tree-select`, safe to remove if no need */
    _title?: string[];
    key?: string;
    children?: string;
}
